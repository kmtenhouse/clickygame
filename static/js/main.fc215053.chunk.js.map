{"version":3,"sources":["components/ScoreCard/index.js","components/Instructions/index.js","components/ClickyImage/index.js","components/Footer/index.js","components/GameBoard/index.js","utils/shuffle.js","utils/gamedata/index.js","App.js","serviceWorker.js","index.js"],"names":["ScoreCard","props","react_default","a","createElement","className","currentScore","bestScore","Instructions","ClickyImage","friend","bgColor","id","onClick","guess","src","image","alt","name","Footer","GameBoard","children","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getGameItems","numToGet","arguments","undefined","allPossibleFriends","slice","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","friendIndex","state","friends","findIndex","eachFriend","friendInQuestion","isClicked","newHiScore","forEach","element","setState","newScore","_this2","Instructions_Instructions","components_ScoreCard","map","currentFriend","components_ClickyImage","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc215053.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Score.css\"\n\nfunction ScoreCard(props) {\n  return (\n    <div className=\"score-banner container-fluid\">\n      <div className=\"container\">\n        <div className=\"row d-flex justify-content-start py-2\">\n          <h5 className=\"px-2 text-warning\">Current Score: {props.currentScore}</h5>\n          <h5 className=\"px-2\"> | </h5>\n          <h5 className=\"px-2\">Best Score: {props.bestScore}</h5>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ScoreCard;\n","import React from 'react';\nimport './Instructions.css';\n\nexport default function Instructions() {\n    return (\n        <header className=\"text-white\">\n            <div className=\"container py-3\">\n                <h1 className=\"display-4\">Till It 'Clicks'!</h1>\n                <h5>Click on every image once (and only once!) to win. The images will shift and swirl, testing your memory might.</h5>\n                <h5>Be careful though - if you forget and select the same pic twice, the game starts over. </h5>\n            </div>\n        </header>\n    )\n}","import React from \"react\";\nimport \"./ClickyImage.css\";\n\nfunction ClickyImage(props) {\n    let className = 'mx-2 my-2 game-item';\n    if(props.friend.bgColor) {\n        className+=\" \" +props.friend.bgColor+\"-bg\";\n    }\n    return (\n        <div className={className} id={props.friend.id} onClick={()=>{props.guess(props.friend.id)}}>\n            <img className='game-image' src={props.friend.image} alt={props.friend.name} />\n        </div>\n    );\n}\n\nexport default ClickyImage;\n","import React from 'react'\n\nexport default function Footer() {\n  return (\n    <footer className=\"page-footer font-small blue pt-4\">\n        <div className=\"footer-copyright text-center py-3\">\n          <p>Images credit to What Pumpkin / Hiveswap</p>\n          <p>Background courtesy of SVGBackgrounds.com.</p>\n        </div>\n    </footer>\n  )\n}\n","import React from 'react'\n\nexport default function GameBoard(props) {\n  return (\n    <div className=\"container my-3\">\n      <div className=\"row\">\n        {props.children}\n      </div>\n    </div>\n  )\n}\n","/**\r\n * Randomly shuffle an array\r\n * (Fisher-Yates algorithm)\r\n * Credits: https://stackoverflow.com/a/2450976/1293256\r\n */\r\n\r\nexport default function shuffle(array) {\r\n  var currentIndex = array.length;\r\n  var temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n  return array;\r\n}","import shuffle from '../shuffle.js';\r\nimport allPossibleFriends from './friends.json';\r\n\r\nexport default function getGameItems(numToGet=8) {\r\n    //function to get a random assortment of game items \r\n    //(default source is friends.json)\r\n    //by default, the game runs with 10 friends, but you can specify any number\r\n    shuffle(allPossibleFriends);\r\n    return allPossibleFriends.slice(0, numToGet);\r\n}","import React from 'react';\n\n//Page components \nimport ScoreCard from \"./components/ScoreCard/\";\nimport Instructions from \"./components/Instructions/\";\nimport ClickyImage from \"./components/ClickyImage/\";\nimport Footer from \"./components/Footer/\";\nimport GameBoard from \"./components/GameBoard/\";\n\n//Utility functions and starter data\nimport shuffle from \"./utils/shuffle.js\";\nimport getGameItems from \"./utils/gamedata/\";\n\nclass App extends React.Component {  \n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: getGameItems(10), //default is 10 items in our game\n      currentScore: 0,\n      bestScore: 0\n    };\n  }\n\n  guess = (id) => {\n    //First, find exactly the right friend within our state array (based on the id of the element they clicked)\n    const friendIndex = this.state.friends.findIndex(eachFriend => eachFriend.id === id);\n    const friendInQuestion = this.state.friends[friendIndex];\n\n    //if we haven't previously clicked this friend, we get a point added to our score!\n    if (!friendInQuestion.isClicked) {\n      friendInQuestion.isClicked = true;\n      let newScore = this.state.currentScore + 1;\n      this.setState({\n        currentScore: newScore,\n        friends: shuffle(this.state.friends.slice(0)) \n        //NOTE: we have to make a shallow copy of the array in order to shuffle, bc the shuffle function directly mutates the array it is operating on. And react doesn't like data in the 'state' to be modified outside of setState. Since slice provides a shallow copy of the original array though, the objects inside the slice still point to the original objects no problem\n      });\n    }\n    //Otherwise, it's a repeat...and the game starts over :)\n    else {\n      //first, check if our previous score beat our record\n      //if so, make this score our new BEST SCORE\n      const newHiScore = (this.state.currentScore > this.state.bestScore ? this.state.currentScore : this.state.bestScore);\n      //then quickly reset the clicks for everyone\n      this.state.friends.forEach(element => {\n        element.isClicked=false;\n      });\n      this.setState({\n        currentScore: 0,\n        bestScore: newHiScore,\n        friends: shuffle(this.state.friends.slice(0))\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Instructions />\n        <ScoreCard currentScore={this.state.currentScore} bestScore={this.state.bestScore}/>\n        <GameBoard>\n          {this.state.friends.map(currentFriend => {\n            return <ClickyImage key={currentFriend.id} friend={currentFriend} guess={this.guess} />\n          })}\n        </GameBoard>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}